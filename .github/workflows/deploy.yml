name: Deploy

on:
  push:
    branches:
      - develop
    tags:
      - '*'

env:
  YARN_CACHE_FOLDER: ~/.yarn
  IMAGE_NAME: exoframe/server

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: https://registry.npmjs.org
      - name: install
        run: yarn --frozen-lockfile
    
      # lint, test, report coverage
      - name: lint
        run: yarn lint
      - name: test
        run: yarn test

      # coveralls
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: https://registry.npmjs.org

      # build
      - name: install
        run: yarn --frozen-lockfile
      - name: build
        run: yarn build

      # deploy to npm
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      # build docker image and deploy to hub
      - name: Login to DockerHub Registry
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build & push docker image
        run: |
          REF=${GITHUB_REF##*/}
          TAG=$REF
          DEBUG_TAG="debug_$TAG"
          VERSION=$(node -pe "require('./package.json').version")

          echo REF=$GITHUB_REF
          echo TAG=$TAG
          echo DEBUG_TAG=$DEBUG_TAG
          echo IMAGE_NAME=$IMAGE_NAME
          echo VERSION=$VERSION

          # Build docker image
          docker build -f docker/Dockerfile --quiet --cache-from $IMAGE_NAME:$TAG --label "version=$VERSION" -t $IMAGE_NAME:$TAG .
          
          # Build debug docker image
          docker build -f docker/Dockerfile.debug --quiet --cache-from $IMAGE_NAME:$DEBUG_TAG --label "version=$VERSION" -t $IMAGE_NAME:$DEBUG_TAG .

          # if git action = tag
          if [[ "$GITHUB_REF" == "refs/tags/"* ]]; then
            docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
            docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:debug_latest
          else
            echo "No tag, skipping"
          fi

          # Push all images to registry
          docker push $IMAGE_NAME
